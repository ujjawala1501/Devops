## ✅ **Objective Overview:**

We are:

* Working on a Git repository located on a remote server.
* Rebasing the `feature` branch with the latest updates from `master`.
* Pushing the updated `feature` branch to the remote repository.

This helps ensure the `feature` branch is up to date with the main line of development, and that the commit history stays clean and linear.

---

## 🧭 **Step-by-Step with Explanations**

---

### **1. SSH into the Remote Server**

```bash
ssh natasha@ststor01.stratos.xfusioncorp.com
```

**Explanation:**
We’re remotely connecting to the server (`ststor01.stratos.xfusioncorp.com`) using the `natasha` user. This is where the Git repository we need to work on is hosted.

* First-time connections will show a fingerprint warning.
* We typed `yes` to confirm it’s safe to proceed.

---

### **2. Navigate to the Git Repository**

```bash
cd /usr/src/kodekloudrepos
cd official
```

**Explanation:**
We're changing into the directory where the Git repository (`official`) is located.

* `cd` is used to change directories.
* The project is in `/usr/src/kodekloudrepos/official`.

---

### **3. Check the Current Git Branch**

```bash
git branch
```

**Explanation:**
We check which branch we're currently on and what other branches exist.

❌ **Error Encountered:**

```
fatal: detected dubious ownership in repository
```

**Why?**
Git suspects this repo might not be secure (due to mismatched ownership). It's a safety feature to prevent tampering.

✅ **Fix:**

```bash
git config --global --add safe.directory /usr/src/kodekloudrepos/official
```

**Explanation:**
We explicitly mark the directory as "safe" to Git, so we can operate normally in it.

---

### **4. Switch to the `master` Branch**

```bash
git checkout master
```

❌ **Error:**

```
Permission denied - cannot create index.lock
```

**Why?**
We don’t have permission to write to `.git` folder.

✅ **Fix:**

```bash
sudo git checkout master
```

**Explanation:**
We run the command as superuser (`sudo`) to bypass file permission issues.

---

### **5. Pull Latest Changes on `master`**

```bash
git pull origin master
```

❌ **Error:**

```
cannot open '.git/FETCH_HEAD': Permission denied
```

✅ **Fix:**

```bash
sudo git pull origin master
```

**Explanation:**
We fetch and merge any updates from the remote `master` branch. This ensures we have the most recent version of the base branch before rebasing.

---

### **6. Switch Back to the `feature` Branch**

```bash
git checkout feature
```

❌ **Error:**

```
Permission denied
```

✅ **Fix:**

```bash
sudo git checkout feature
```

**Explanation:**
Now we switch back to the branch we’re working on (`feature`) in order to rebase it with the updated `master`.

---

### **7. Rebase `feature` with `master`**

```bash
git rebase master
```

❌ **Error:**

```
Permission denied creating rebase-merge directory
```

✅ **Fix:**

```bash
sudo git rebase master
```

**Explanation:**
This reapplies commits from the `feature` branch on top of the latest `master` branch. It’s used to maintain a clean, linear commit history.

---

### **8. Add & Commit Changes (if needed)**

```bash
git add .
git commit -m "rebase"
```

❌ **Error:**

```
Permission denied on .git/index.lock
```

✅ **Fix:**

```bash
sudo git add .
sudo git commit -m "rebase"
```

**Explanation:**

* `git add .` stages all modified files.
* `git commit -m "rebase"` commits the staged changes with a message.
* In this case, Git said “nothing to commit,” meaning there were no code changes after rebase — just commit history changes.

---

### **9. Attempt to Continue Rebase**

```bash
git rebase --continue
```

**Explanation:**
This command continues the rebase after resolving conflicts.
❌ **Error:**

```
fatal: no rebase in progress
```

✅ **Meaning:**
No conflicts occurred, and rebase had already completed successfully. No further action is needed here.

---

### **10. Push the Updated `feature` Branch**

```bash
git push --force-with-lease origin feature
```

❌ **Error:**

```
fatal: detected dubious ownership in repository at '/opt/official.git'
```

**Why?**
Again, Git is being cautious about directory ownership.

✅ **Fix:**

```bash
git config --global --add safe.directory /opt/official.git
sudo git push --force-with-lease origin feature
```

**Explanation:**

* `--force-with-lease` safely force-pushes the rebased branch.
* We needed `sudo` due to write permissions.
* We also marked the remote repo directory as safe.

✅ **Result:**
Push succeeded:

```
+ fe4a7c9...213d2a6 feature -> feature (forced update)
```

---

## ✅ **Final Outcome:**

* The `feature` branch has been successfully rebased with the latest `master`.
* All changes were pushed to the remote repository using `--force-with-lease`.

---

## 🔧 **Key Takeaways & Common Issues:**

| **Issue**                     | **Fix**                                               |
| ----------------------------- | ----------------------------------------------------- |
| **Dubious ownership warning** | Use `git config --global --add safe.directory <path>` |
| **Permission denied errors**  | Run Git commands using `sudo`                         |
| **No rebase in progress**     | Rebase already finished, no conflict to resolve       |
| **Nothing to commit**         | No actual file changes after rebase — just history    |

---
